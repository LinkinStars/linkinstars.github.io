<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinkinStar&#39;s Blog</title>
  
  
  <link href="https://www.linkinstars.com/atom.xml" rel="self"/>
  
  <link href="https://www.linkinstars.com/"/>
  <updated>2021-11-24T14:58:35.146Z</updated>
  <id>https://www.linkinstars.com/</id>
  
  <author>
    <name>LinkinStar</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go 应用在 k8s 中如何优雅停止</title>
    <link href="https://www.linkinstars.com/post/12666403.html"/>
    <id>https://www.linkinstars.com/post/12666403.html</id>
    <published>2021-11-21T16:00:00.000Z</published>
    <updated>2021-11-24T14:58:35.146Z</updated>
    
    
    <summary type="html">&lt;p&gt;每次当我们发布新版本的时候总是慌兮兮，一方面是担心有 bug，另一方面其实重启应用会带来一些抖动，可能有几秒钟或者几个请求的不正常，从而担心用户在这段时间内的操作。那么如何在应用重启的过程中尽可能的保证不会带来抖动，从而平滑又优雅的重启呢？&lt;/p&gt;
&lt;p&gt;本文只针对于应用版本更新时，进行版本发布时进行的重启操作，从而导致的相关问题的解决。不涉及由于应用本身 panic 导致的重启，也不涉及蓝绿发布或回滚等操作。当前版本更新是在 k8s 中进行的重启操作，访问负载均衡交由 k8s 的 service 处理，再上层的网关层面的负载则不在本次讨论范围内。&lt;/p&gt;</summary>
    
    
    
    <category term="architecture" scheme="https://www.linkinstars.com/categories/architecture/"/>
    
    
    <category term="graceful-shutdown" scheme="https://www.linkinstars.com/tags/graceful-shutdown/"/>
    
  </entry>
  
  <entry>
    <title>defer 原理分析</title>
    <link href="https://www.linkinstars.com/post/4dba76d6.html"/>
    <id>https://www.linkinstars.com/post/4dba76d6.html</id>
    <published>2021-11-10T16:00:00.000Z</published>
    <updated>2021-11-14T14:36:12.198Z</updated>
    
    
    <summary type="html">&lt;p&gt;很早之前我有写过有关 defer 的博客，现在看来起标题的时候有点蠢，有点标题党，(&lt;a href=&quot;https://www.linkinstars.com/post/48e6221e.html&quot;&gt;https://www.linkinstars.com/post/48e6221e.html&lt;/a&gt;) 其中主要是注重与 defer 的使用，避免使用上的问题，对于 defer 具体实现其实只是点了一下，而今天就让我们详细看看 defer 究竟是如何实现的。&lt;/p&gt;</summary>
    
    
    
    <category term="golang源码解析" scheme="https://www.linkinstars.com/categories/golang%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="defer" scheme="https://www.linkinstars.com/tags/defer/"/>
    
  </entry>
  
  <entry>
    <title>go 函数调用规约</title>
    <link href="https://www.linkinstars.com/post/fecd400.html"/>
    <id>https://www.linkinstars.com/post/fecd400.html</id>
    <published>2021-10-19T16:00:00.000Z</published>
    <updated>2021-11-07T15:14:34.502Z</updated>
    
    
    <summary type="html">&lt;p&gt;函数调用规约？如果你是第一次听到这个名词可能会有疑惑，这是在说什么？难道两个函数之间调用还需要约定什么吗？难道不是定好入参出参就可以了吗？没错函数的调用规约其实就是：我在调用其他函数的时候我的参数和返回值要如何分布？&lt;/p&gt;
&lt;p&gt;那么其实在 golang 底层函数的调用还是有很多细节的，比如你的入参放在哪里？返回值存放在哪里？相信看完这篇你就都明白了。&lt;/p&gt;</summary>
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="func-call" scheme="https://www.linkinstars.com/tags/func-call/"/>
    
  </entry>
  
  <entry>
    <title>go 中其实不复杂的 timer</title>
    <link href="https://www.linkinstars.com/post/efe08c85.html"/>
    <id>https://www.linkinstars.com/post/efe08c85.html</id>
    <published>2021-10-10T16:00:00.000Z</published>
    <updated>2021-10-31T16:25:45.533Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 go 中当我们需要延迟一段时间后执行，或者需要间隔固定时间去执行某个行为的时候就需要使用到 timer，那么 timer 到底是如何实现的呢？我们今天就来看看 timer 里面是什么样的。&lt;/p&gt;
&lt;p&gt;同时因为 1.14 版本前后 timer 的实现有很大的区别，我们顺便来了解一下之前的版本和现在的版本有什么样的不一样，到底做了什么样的优化。&lt;/p&gt;</summary>
    
    
    
    <category term="golang源码解析" scheme="https://www.linkinstars.com/categories/golang%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="timer" scheme="https://www.linkinstars.com/tags/timer/"/>
    
  </entry>
  
  <entry>
    <title>我怎么从来没见过 sync.Cond</title>
    <link href="https://www.linkinstars.com/post/122ec973.html"/>
    <id>https://www.linkinstars.com/post/122ec973.html</id>
    <published>2021-09-17T16:00:00.000Z</published>
    <updated>2021-10-21T15:30:27.658Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;sync.Cond&lt;/code&gt; 作为 go 标准库提供的一个并发原语，但是可能你从来没听过，可见它使用场景挺少的，但是我们需要有这个知识储备，只有储备了之后才能在需要用的时候用出来。&lt;/p&gt;
&lt;p&gt;其实如果你之前和我一样接触过 java，那么其实对于这个并发原语其实应该很熟悉，其实就是常说的等待通知机制，也就是 wait 方法和 notify 方法。&lt;/p&gt;</summary>
    
    
    
    <category term="golang源码解析" scheme="https://www.linkinstars.com/categories/golang%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="sync.Cond" scheme="https://www.linkinstars.com/tags/sync-Cond/"/>
    
  </entry>
  
  <entry>
    <title>golang 使用 rabbitmq 延迟队列</title>
    <link href="https://www.linkinstars.com/post/65c8999.html"/>
    <id>https://www.linkinstars.com/post/65c8999.html</id>
    <published>2021-09-10T16:00:00.000Z</published>
    <updated>2021-09-21T15:32:59.445Z</updated>
    
    
    <summary type="html">&lt;p&gt;你在实际业务中是否有遇到过下面这样的场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;订单十分钟没有支付，自动取消&lt;/li&gt;
&lt;li&gt;用户注册成功后无任何操作，一天后自动提醒&lt;/li&gt;
&lt;li&gt;预定票之后，在出发之前的一天自动提醒用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样类似的场景经常会发生在实际的业务中，它们总有一个共性，就是当前并不是马上触发，而是需要过一段时间才进行触发，当触发时间到达时才进行具体的执行。那么问题就来了，为了实现这样的功能，我们如何更加灵活的实现呢？&lt;/p&gt;</summary>
    
    
    
    <category term="rabbitmq" scheme="https://www.linkinstars.com/categories/rabbitmq/"/>
    
    
    <category term="delay-queue" scheme="https://www.linkinstars.com/tags/delay-queue/"/>
    
  </entry>
  
  <entry>
    <title>K8S之CNI</title>
    <link href="https://www.linkinstars.com/post/47a7987b.html"/>
    <id>https://www.linkinstars.com/post/47a7987b.html</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-09-21T15:32:59.442Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前我们解决了跨主机间容器间通信的问题，但是这也只能说我们铺好了路，村里通路了，但是其实作为 k8s 来说，还有好多其他的问题等待着我们解决。今天我们就通过这些问题来看看 k8s 的 CNI 的设计。CNI 到底究竟是个什么东西，到底是不是和你想的一样那么困难。&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-cni" scheme="https://www.linkinstars.com/tags/k8s-cni/"/>
    
  </entry>
  
  <entry>
    <title>K8S之跨主机通信</title>
    <link href="https://www.linkinstars.com/post/43a15dd1.html"/>
    <id>https://www.linkinstars.com/post/43a15dd1.html</id>
    <published>2021-08-19T16:00:00.000Z</published>
    <updated>2021-09-21T15:32:59.443Z</updated>
    
    
    <summary type="html">&lt;p&gt;你是否之前看过 k8s 的网络部分，第一次看是否会觉得很困难？或者说你有没有想过为什么 k8s 要这样设计它的网络，&lt;strong&gt;跨主机之间的网络通信究竟是怎么实现的？&lt;/strong&gt;今天就来搞一篇干货，其实想写这个很久了，但是一直拖延症，这次正好碰到了一个新的点想让我仔细重新审视一下。&lt;/p&gt;
&lt;p&gt;本文可能需要你有以下知识基础：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker基本原理&lt;/li&gt;
&lt;li&gt;k8s基本架构&lt;/li&gt;
&lt;li&gt;网络基础知识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文不想引出过多细节的概念，因为网络本身确实有很多细节，每一个细节其实都可以写一篇，如果篇幅过长就会让人觉得没有重点，于是本文的重点将会放在从外部的大视角来看&lt;strong&gt;跨主机的网络通信&lt;/strong&gt;，其中的细节先挖坑，后面慢慢填。&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-network" scheme="https://www.linkinstars.com/tags/k8s-network/"/>
    
  </entry>
  
  <entry>
    <title>go 中没怎么用过的 sync.Map</title>
    <link href="https://www.linkinstars.com/post/8e25dde4.html"/>
    <id>https://www.linkinstars.com/post/8e25dde4.html</id>
    <published>2021-08-14T16:00:00.000Z</published>
    <updated>2021-08-15T15:44:10.146Z</updated>
    
    
    <summary type="html">&lt;p&gt;我们知道 golang 的 map 并发会有问题，所以 go 官方在 sync 包中加入了一个 sync.map 来作为一个官方的并发安全的 map 实现。&lt;/p&gt;
&lt;p&gt;如果你了解过 java 中常用的一个并发安全的 map 叫做 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 就会知道它有两个亮点设计：一是当链表长度过长的时候会转换为红黑树的实现，还有一个就是分段锁。得益于这两个设计也导致 java 中实现的代码非常复杂，偷笑。&lt;/p&gt;
&lt;p&gt;那么 go 里面是如何设计的呢？今天我们就来看看它是怎么实现的。&lt;/p&gt;
&lt;p&gt;PS: 本文 go 源码基于版本1.16.2，我觉得当有了泛型之后这个库十有八九是要改的….&lt;/p&gt;</summary>
    
    
    
    <category term="golang源码解析" scheme="https://www.linkinstars.com/categories/golang%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="sync.Map" scheme="https://www.linkinstars.com/tags/sync-Map/"/>
    
  </entry>
  
  <entry>
    <title>k8s 基于角色的权限控制 RBAC</title>
    <link href="https://www.linkinstars.com/post/bfc8f54a.html"/>
    <id>https://www.linkinstars.com/post/bfc8f54a.html</id>
    <published>2021-07-30T16:00:00.000Z</published>
    <updated>2021-08-15T15:28:50.287Z</updated>
    
    
    <summary type="html">&lt;p&gt;RBAC 之所以一直没有写这个，一方面是因为它确实并不复杂，二来平常确实接触不多，今天就来顺路讲讲它&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s 部署 prometheus</title>
    <link href="https://www.linkinstars.com/post/69ddaf77.html"/>
    <id>https://www.linkinstars.com/post/69ddaf77.html</id>
    <published>2021-07-21T16:00:00.000Z</published>
    <updated>2021-11-24T14:48:09.122Z</updated>
    
    
    <summary type="html">&lt;p&gt;看到很多部署 prometheus 到 k8s 集群的教程，发现都是非常麻烦的各种配置，懒人的我就想整个一键部署的，开箱即用的，既然有了 helm 那肯定只要一个 charts 就可以搞定了吧，想着就是这样，所以在网上找来找去，终于被我发现了。下面记录一下使用过程，方便以后进行部署。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 本文适用于开发者单 k8s 集群部署 prometheus，如果是运维可建议进行独立部署，一方面不需要占用集群内部资源并保证多活，另一方面可以支持多集群扩展。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="prometheus" scheme="https://www.linkinstars.com/categories/prometheus/"/>
    
    
    <category term="prometheus" scheme="https://www.linkinstars.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>让你最快上手 go 的 pprof 性能分析大杀器</title>
    <link href="https://www.linkinstars.com/post/a2e80cee.html"/>
    <id>https://www.linkinstars.com/post/a2e80cee.html</id>
    <published>2021-07-14T16:00:00.000Z</published>
    <updated>2021-08-15T15:28:50.291Z</updated>
    
    
    <summary type="html">&lt;p&gt;前言，发现一直没有记录过 pprof 分析的博客，其实在实际的业务场景中已经使用它很多次了，对于性能分析来说它真的是一大杀器，基本上有了它，80% 的性能问题都能被一目了然。每次出现性能问题，总是下面几个步骤，测试环境开 pprof，启动，流量重放，火焰图生成，一看，仔细分析一下，问题就浮于水面。&lt;/p&gt;
&lt;p&gt;今天来用最简单的一个案例，来让你快速上手 pprof，所以本博客包含以下内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最快能让你用上 pprof&lt;/li&gt;
&lt;li&gt;能让你最快学会认识火焰图&lt;/li&gt;
&lt;li&gt;学会了之后其他剩下的功能你就可以慢慢自己摸索了&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="pprof" scheme="https://www.linkinstars.com/tags/pprof/"/>
    
  </entry>
  
  <entry>
    <title>初识 CGO - 利用 CGO 使用 C++ STL</title>
    <link href="https://www.linkinstars.com/post/19c0fd4e.html"/>
    <id>https://www.linkinstars.com/post/19c0fd4e.html</id>
    <published>2021-07-03T16:00:00.000Z</published>
    <updated>2021-08-13T13:45:24.366Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前我也了解过 CGO 相关的知识，但是当时给我的印象全部都是 “CGO 性能差” “完全没有必要，实际根本用不到”，但是这次听了大佬的一些分享发现 CGO 其实就是黑科技啊，&lt;strong&gt;有了它你在使用 go 的时候有了更多的想象力&lt;/strong&gt;。本文将带你初步了解和使用 CGO，本文只是抛砖头，因为有关 CGO 的文档其实蛮少的，在其中也有很多坑，所以今天来踩一次，不知道会不会留下什么坑….&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有了 CGO，Go 就有机会继承 C/C++近半个世纪的遗产 by  曹大&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="CGO" scheme="https://www.linkinstars.com/tags/CGO/"/>
    
  </entry>
  
  <entry>
    <title>Golang逃逸分析</title>
    <link href="https://www.linkinstars.com/post/1ceb1a77.html"/>
    <id>https://www.linkinstars.com/post/1ceb1a77.html</id>
    <published>2021-07-01T16:00:00.000Z</published>
    <updated>2021-07-02T17:05:19.314Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="逃逸分析" scheme="https://www.linkinstars.com/tags/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>GopherChina2021 个人总结</title>
    <link href="https://www.linkinstars.com/post/5f9b9e64.html"/>
    <id>https://www.linkinstars.com/post/5f9b9e64.html</id>
    <published>2021-06-27T16:00:00.000Z</published>
    <updated>2021-06-29T16:20:43.318Z</updated>
    
    
    <summary type="html">&lt;p&gt;今年本来没想着要去的，因为确实有点远，加上疫情之下不太方便，但是意料之外来了一张门票，那就必须去一下了，这次收获也不少，有了上次的经验，这次就听得很舒服，不像上次那样那么累了，这次能准确的知道什么应该仔细听，什么应该略过，所以这次的笔记就相对来说少一些，精炼一点。&lt;/p&gt;
&lt;p&gt;这次去也面基了大佬，果然北京的都是大佬，都比我卷的厉害，以后还要多学习，哈哈哈，膜拜膜拜~&lt;/p&gt;</summary>
    
    
    
    <category term="GopherChina" scheme="https://www.linkinstars.com/categories/GopherChina/"/>
    
    
    <category term="GopherChina" scheme="https://www.linkinstars.com/tags/GopherChina/"/>
    
  </entry>
  
  <entry>
    <title>轻量级 k8s 应用日志收集方案 loki</title>
    <link href="https://www.linkinstars.com/post/da4cf864.html"/>
    <id>https://www.linkinstars.com/post/da4cf864.html</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.148Z</updated>
    
    
    <summary type="html">&lt;p&gt;微服务早已是一个过时的热词，同时，容器 和 k8s 的出现让它更一步成为了一种时尚。同样会带来很多附赠的问题，&lt;strong&gt;日志收集&lt;/strong&gt;就是其中一个比较重要的问题。当应用容器化之后，需要查看日志，如果还需要登录服务器，找到对应目录，然后 tail 查看，成本太高了，极大的影响效率。当前其实日志收集方案很多，在实践了多个方案之后，我终于能在今天写出我个人认为我最喜欢的一个方案了 &lt;strong&gt;loki&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="loki" scheme="https://www.linkinstars.com/categories/loki/"/>
    
    
    <category term="loki" scheme="https://www.linkinstars.com/tags/loki/"/>
    
  </entry>
  
  <entry>
    <title>monitoror/monitoror 最轻量的监控大屏</title>
    <link href="https://www.linkinstars.com/post/94902806.html"/>
    <id>https://www.linkinstars.com/post/94902806.html</id>
    <published>2021-04-11T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.148Z</updated>
    
    
    <summary type="html">&lt;p&gt;一提到监控大屏，那第一想法就是 grafana 对吧，各种样式图形都非常好看，而且支持各种数据源。而今天要分享的是一个更加轻量的监控大屏 monitoror/monitoror&lt;/p&gt;
&lt;p&gt;有了它能帮你快读构建一个的对于网站或者应用的监控页面，特别是在小应用数量多的时候非常简单易用，作为一个大屏展示时它我觉得它足够简洁&lt;/p&gt;</summary>
    
    
    
    <category term="monitoror" scheme="https://www.linkinstars.com/categories/monitoror/"/>
    
    
    <category term="monitoror" scheme="https://www.linkinstars.com/tags/monitoror/"/>
    
  </entry>
  
  <entry>
    <title>k8s 意外集锦 - oom 的连锁反应</title>
    <link href="https://www.linkinstars.com/post/b817d222.html"/>
    <id>https://www.linkinstars.com/post/b817d222.html</id>
    <published>2021-03-11T16:00:00.000Z</published>
    <updated>2021-08-15T15:00:12.263Z</updated>
    
    
    <summary type="html">&lt;p&gt;一开始觉得 oom 是一个常见问题，应该没有什么大问题，反正 k8s 集群会调度的，但其实它造成的连锁反应很恐怖。&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-accident" scheme="https://www.linkinstars.com/tags/k8s-accident/"/>
    
  </entry>
  
  <entry>
    <title>k8s 意外集锦 - configmap 挂载 目录 只读</title>
    <link href="https://www.linkinstars.com/post/c86fbf9f.html"/>
    <id>https://www.linkinstars.com/post/c86fbf9f.html</id>
    <published>2021-02-01T16:00:00.000Z</published>
    <updated>2021-08-15T15:00:32.453Z</updated>
    
    
    <summary type="html">&lt;p&gt; OCI runtime create failed:&lt;/p&gt;
&lt;p&gt; /var/lib/docker/overlay2/6573e40fef5bc51b4e565ad9554f225806f05a9f9089cc9e210c0e35a80e6e1f/merged/etc/resolv.conf: read-only&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-accident" scheme="https://www.linkinstars.com/tags/k8s-accident/"/>
    
  </entry>
  
  <entry>
    <title>k8s 小技巧</title>
    <link href="https://www.linkinstars.com/post/9ef22657.html"/>
    <id>https://www.linkinstars.com/post/9ef22657.html</id>
    <published>2021-01-22T16:00:00.000Z</published>
    <updated>2021-08-15T15:00:18.375Z</updated>
    
    
    <summary type="html">&lt;p&gt;本博客持续更新…用于记录 k8s 使用过程中的很多的小技巧，也希望你能提供更多的小技巧来~&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-tips" scheme="https://www.linkinstars.com/tags/k8s-tips/"/>
    
  </entry>
  
</feed>
