<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinkinStar&#39;s Blog</title>
  
  
  <link href="https://www.linkinstars.com/atom.xml" rel="self"/>
  
  <link href="https://www.linkinstars.com/"/>
  <updated>2021-08-15T15:28:50.292Z</updated>
  <id>https://www.linkinstars.com/</id>
  
  <author>
    <name>LinkinStar</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go 中没怎么用过的 sync.Map</title>
    <link href="https://www.linkinstars.com/post/8e25dde4.html"/>
    <id>https://www.linkinstars.com/post/8e25dde4.html</id>
    <published>2021-08-14T16:00:00.000Z</published>
    <updated>2021-08-15T15:28:50.292Z</updated>
    
    
    <summary type="html">&lt;p&gt;我们知道 golang 的 map 并发会有问题，所以 go 官方在 sync 包中加入了一个 sync.map 来作为一个官方的并发安全的 map 实现。&lt;/p&gt;
&lt;p&gt;如果你了解过 java 中常用的一个并发安全的 map 叫做 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 就会知道它有两个亮点设计：一是当链表长度过长的时候会转换为红黑树的实现，还有一个就是分段锁。得益于这两个设计也导致 java 中实现的代码非常复杂，偷笑。&lt;/p&gt;
&lt;p&gt;那么 go 里面是如何设计的呢？今天我们就来看看它是怎么实现的。&lt;/p&gt;
&lt;p&gt;PS: 本文 go 源码基于版本1.16.2，我觉得当有了泛型之后这个库十有八九是要改的….&lt;/p&gt;</summary>
    
    
    
    <category term="golang源码解析" scheme="https://www.linkinstars.com/categories/golang%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="sync.Map" scheme="https://www.linkinstars.com/tags/sync-Map/"/>
    
  </entry>
  
  <entry>
    <title>k8s 基于角色的权限控制 RBAC</title>
    <link href="https://www.linkinstars.com/post/bfc8f54a.html"/>
    <id>https://www.linkinstars.com/post/bfc8f54a.html</id>
    <published>2021-07-30T16:00:00.000Z</published>
    <updated>2021-08-15T15:28:50.287Z</updated>
    
    
    <summary type="html">&lt;p&gt;RBAC 之所以一直没有写这个，一方面是因为它确实并不复杂，二来平常确实接触不多，今天就来顺路讲讲它&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s 部署 prometheus</title>
    <link href="https://www.linkinstars.com/post/69ddaf77.html"/>
    <id>https://www.linkinstars.com/post/69ddaf77.html</id>
    <published>2021-07-21T16:00:00.000Z</published>
    <updated>2021-08-15T15:28:50.289Z</updated>
    
    
    <summary type="html">&lt;p&gt;看到很多部署 prometheus 到 k8s 集群的教程，发现都是非常麻烦的各种配置，懒人的我就想整个一键部署的，开箱即用的，既然有了 helm 那肯定只要一个 charts 就可以搞定了吧，想着就是这样，所以在网上找来找去，终于被我发现了。下面记录一下使用过程，方便以后进行部署。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 本文适用于开发者单 k8s 集群部署 prometheus，如果是运维可建议进行独立部署，一方面不需要占用集群内部资源并保证多活，另一方面可以支持多集群扩展。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="prometheus" scheme="https://www.linkinstars.com/categories/prometheus/"/>
    
    
    <category term="prometheus" scheme="https://www.linkinstars.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>让你最快上手 go 的 pprof 性能分析大杀器</title>
    <link href="https://www.linkinstars.com/post/a2e80cee.html"/>
    <id>https://www.linkinstars.com/post/a2e80cee.html</id>
    <published>2021-07-14T16:00:00.000Z</published>
    <updated>2021-08-15T15:28:50.291Z</updated>
    
    
    <summary type="html">&lt;p&gt;前言，发现一直没有记录过 pprof 分析的博客，其实在实际的业务场景中已经使用它很多次了，对于性能分析来说它真的是一大杀器，基本上有了它，80% 的性能问题都能被一目了然。每次出现性能问题，总是下面几个步骤，测试环境开 pprof，启动，流量重放，火焰图生成，一看，仔细分析一下，问题就浮于水面。&lt;/p&gt;
&lt;p&gt;今天来用最简单的一个案例，来让你快速上手 pprof，所以本博客包含以下内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最快能让你用上 pprof&lt;/li&gt;
&lt;li&gt;能让你最快学会认识火焰图&lt;/li&gt;
&lt;li&gt;学会了之后其他剩下的功能你就可以慢慢自己摸索了&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="pprof" scheme="https://www.linkinstars.com/tags/pprof/"/>
    
  </entry>
  
  <entry>
    <title>初识 CGO - 利用 CGO 使用 C++ STL</title>
    <link href="https://www.linkinstars.com/post/19c0fd4e.html"/>
    <id>https://www.linkinstars.com/post/19c0fd4e.html</id>
    <published>2021-07-03T16:00:00.000Z</published>
    <updated>2021-08-13T13:45:24.366Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前我也了解过 CGO 相关的知识，但是当时给我的印象全部都是 “CGO 性能差” “完全没有必要，实际根本用不到”，但是这次听了大佬的一些分享发现 CGO 其实就是黑科技啊，&lt;strong&gt;有了它你在使用 go 的时候有了更多的想象力&lt;/strong&gt;。本文将带你初步了解和使用 CGO，本文只是抛砖头，因为有关 CGO 的文档其实蛮少的，在其中也有很多坑，所以今天来踩一次，不知道会不会留下什么坑….&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有了 CGO，Go 就有机会继承 C/C++近半个世纪的遗产 by  曹大&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="CGO" scheme="https://www.linkinstars.com/tags/CGO/"/>
    
  </entry>
  
  <entry>
    <title>Golang逃逸分析</title>
    <link href="https://www.linkinstars.com/post/1ceb1a77.html"/>
    <id>https://www.linkinstars.com/post/1ceb1a77.html</id>
    <published>2021-07-01T16:00:00.000Z</published>
    <updated>2021-07-02T17:05:19.314Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="逃逸分析" scheme="https://www.linkinstars.com/tags/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>GopherChina2021 个人总结</title>
    <link href="https://www.linkinstars.com/post/5f9b9e64.html"/>
    <id>https://www.linkinstars.com/post/5f9b9e64.html</id>
    <published>2021-06-27T16:00:00.000Z</published>
    <updated>2021-06-29T16:20:43.318Z</updated>
    
    
    <summary type="html">&lt;p&gt;今年本来没想着要去的，因为确实有点远，加上疫情之下不太方便，但是意料之外来了一张门票，那就必须去一下了，这次收获也不少，有了上次的经验，这次就听得很舒服，不像上次那样那么累了，这次能准确的知道什么应该仔细听，什么应该略过，所以这次的笔记就相对来说少一些，精炼一点。&lt;/p&gt;
&lt;p&gt;这次去也面基了大佬，果然北京的都是大佬，都比我卷的厉害，以后还要多学习，哈哈哈，膜拜膜拜~&lt;/p&gt;</summary>
    
    
    
    <category term="GopherChina" scheme="https://www.linkinstars.com/categories/GopherChina/"/>
    
    
    <category term="GopherChina" scheme="https://www.linkinstars.com/tags/GopherChina/"/>
    
  </entry>
  
  <entry>
    <title>轻量级 k8s 应用日志收集方案 loki</title>
    <link href="https://www.linkinstars.com/post/da4cf864.html"/>
    <id>https://www.linkinstars.com/post/da4cf864.html</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.148Z</updated>
    
    
    <summary type="html">&lt;p&gt;微服务早已是一个过时的热词，同时，容器 和 k8s 的出现让它更一步成为了一种时尚。同样会带来很多附赠的问题，&lt;strong&gt;日志收集&lt;/strong&gt;就是其中一个比较重要的问题。当应用容器化之后，需要查看日志，如果还需要登录服务器，找到对应目录，然后 tail 查看，成本太高了，极大的影响效率。当前其实日志收集方案很多，在实践了多个方案之后，我终于能在今天写出我个人认为我最喜欢的一个方案了 &lt;strong&gt;loki&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="loki" scheme="https://www.linkinstars.com/categories/loki/"/>
    
    
    <category term="loki" scheme="https://www.linkinstars.com/tags/loki/"/>
    
  </entry>
  
  <entry>
    <title>monitoror/monitoror 最轻量的监控大屏</title>
    <link href="https://www.linkinstars.com/post/94902806.html"/>
    <id>https://www.linkinstars.com/post/94902806.html</id>
    <published>2021-04-11T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.148Z</updated>
    
    
    <summary type="html">&lt;p&gt;一提到监控大屏，那第一想法就是 grafana 对吧，各种样式图形都非常好看，而且支持各种数据源。而今天要分享的是一个更加轻量的监控大屏 monitoror/monitoror&lt;/p&gt;
&lt;p&gt;有了它能帮你快读构建一个的对于网站或者应用的监控页面，特别是在小应用数量多的时候非常简单易用，作为一个大屏展示时它我觉得它足够简洁&lt;/p&gt;</summary>
    
    
    
    <category term="monitoror" scheme="https://www.linkinstars.com/categories/monitoror/"/>
    
    
    <category term="monitoror" scheme="https://www.linkinstars.com/tags/monitoror/"/>
    
  </entry>
  
  <entry>
    <title>k8s 意外集锦 - oom 的连锁反应</title>
    <link href="https://www.linkinstars.com/post/b817d222.html"/>
    <id>https://www.linkinstars.com/post/b817d222.html</id>
    <published>2021-03-11T16:00:00.000Z</published>
    <updated>2021-08-15T15:00:12.263Z</updated>
    
    
    <summary type="html">&lt;p&gt;一开始觉得 oom 是一个常见问题，应该没有什么大问题，反正 k8s 集群会调度的，但其实它造成的连锁反应很恐怖。&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-accident" scheme="https://www.linkinstars.com/tags/k8s-accident/"/>
    
  </entry>
  
  <entry>
    <title>k8s 意外集锦 - configmap 挂载 目录 只读</title>
    <link href="https://www.linkinstars.com/post/c86fbf9f.html"/>
    <id>https://www.linkinstars.com/post/c86fbf9f.html</id>
    <published>2021-02-01T16:00:00.000Z</published>
    <updated>2021-08-15T15:00:32.453Z</updated>
    
    
    <summary type="html">&lt;p&gt; OCI runtime create failed:&lt;/p&gt;
&lt;p&gt; /var/lib/docker/overlay2/6573e40fef5bc51b4e565ad9554f225806f05a9f9089cc9e210c0e35a80e6e1f/merged/etc/resolv.conf: read-only&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-accident" scheme="https://www.linkinstars.com/tags/k8s-accident/"/>
    
  </entry>
  
  <entry>
    <title>k8s 小技巧</title>
    <link href="https://www.linkinstars.com/post/9ef22657.html"/>
    <id>https://www.linkinstars.com/post/9ef22657.html</id>
    <published>2021-01-22T16:00:00.000Z</published>
    <updated>2021-08-15T15:00:18.375Z</updated>
    
    
    <summary type="html">&lt;p&gt;本博客持续更新…用于记录 k8s 使用过程中的很多的小技巧，也希望你能提供更多的小技巧来~&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://www.linkinstars.com/categories/kubernetes/"/>
    
    
    <category term="k8s-tips" scheme="https://www.linkinstars.com/tags/k8s-tips/"/>
    
  </entry>
  
  <entry>
    <title>Weave Scope 监控 k8s 集群</title>
    <link href="https://www.linkinstars.com/post/2580a453.html"/>
    <id>https://www.linkinstars.com/post/2580a453.html</id>
    <published>2021-01-11T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.150Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前一直在寻找一个 k8s 监控的工具，因为一直使用的是本地的 lens 的客户端，虽然使用上已经非常方便了，但是其实对于资源消耗的监控少了一点，有些资源消耗并不是能容易看到，并且服务间依赖是没有办法表现出来的，后来发现了 Weave Scope 满足了我的需求。&lt;/p&gt;</summary>
    
    
    
    <category term="Weave-Scope" scheme="https://www.linkinstars.com/categories/Weave-Scope/"/>
    
    
    <category term="Weave-Scope" scheme="https://www.linkinstars.com/tags/Weave-Scope/"/>
    
  </entry>
  
  <entry>
    <title>GopherChina2020 个人总结</title>
    <link href="https://www.linkinstars.com/post/c2947f12.html"/>
    <id>https://www.linkinstars.com/post/c2947f12.html</id>
    <published>2020-11-22T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.166Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前去过几次相关 go 的线下 meetup，这次相对来说比较大型一些，两天的听下来还是比较烧脑的，光是记录的笔记都有近千行了，整体来说收获很大。&lt;/p&gt;
&lt;p&gt;有的人问，值票价吗？我回答：对喜欢的投资没有不值得的。对我来说值了~&lt;/p&gt;
&lt;p&gt;有的人问，值得去吗？我回答：不一定，因为可能在很多大佬看来能听到的点不多（采访了几位现场的大厂观众，普遍表示只有其中 1 到 2 场满足他们的要求）但是如果你的小白或者一年到两年左右，还是能见识很多东西的。可能是我听多了，和之前自己学到的有点重复…&lt;/p&gt;</summary>
    
    
    
    <category term="GopherChina" scheme="https://www.linkinstars.com/categories/GopherChina/"/>
    
    
    <category term="GopherChina" scheme="https://www.linkinstars.com/tags/GopherChina/"/>
    
  </entry>
  
  <entry>
    <title>下一个 nginx？caddy 自动 https 真香</title>
    <link href="https://www.linkinstars.com/post/51c3059c.html"/>
    <id>https://www.linkinstars.com/post/51c3059c.html</id>
    <published>2020-11-13T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.144Z</updated>
    
    
    <summary type="html">&lt;p&gt;我们通常在部署 web 服务的时候往往会选择 nginx 作为最前面的一个狠角色，它的性能和能力大家也是有目共睹的，反向代理负载均衡等等。而作为后起之秀 caddy 却不被人所熟知，不过渐渐的也开始展露头角。&lt;br&gt;今天我就来介绍这个 caddy ，为什么我会称它有可能成为下一个 nginx。&lt;/p&gt;</summary>
    
    
    
    <category term="caddy" scheme="https://www.linkinstars.com/categories/caddy/"/>
    
    
    <category term="caddy" scheme="https://www.linkinstars.com/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>openfaas/faas 环境搭建和开发使用</title>
    <link href="https://www.linkinstars.com/post/f7a42ef3.html"/>
    <id>https://www.linkinstars.com/post/f7a42ef3.html</id>
    <published>2020-10-18T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.149Z</updated>
    
    
    <summary type="html">&lt;p&gt;serverless 大环境下出现了 faas，即 function as  a service，函数即服务；其意思也非常好理解，就是能将一个函数作为一个服务进行使用，用户只需要编写一个函数功能即可，不需要额外去关心别的东西。&lt;a href=&quot;https://github.com/openfaas/faas&quot;&gt;https://github.com/openfaas/faas&lt;/a&gt; 是其中的一种实现方式。&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="https://www.linkinstars.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="faas" scheme="https://www.linkinstars.com/tags/faas/"/>
    
  </entry>
  
  <entry>
    <title>Golang Mutex 到底是否应该使用指针</title>
    <link href="https://www.linkinstars.com/post/e360d978.html"/>
    <id>https://www.linkinstars.com/post/e360d978.html</id>
    <published>2020-07-17T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.155Z</updated>
    
    
    <summary type="html">&lt;p&gt;在写 go 的时候，你使用 Mutex 的时候使用的是指针还是说没有使用指针，还是随意来？&lt;/p&gt;
&lt;p&gt;前两天我收到了下面这样的一个 PR，我突然就想到了这个问题，于是就有了这篇博客。&lt;/p&gt;</summary>
    
    
    
    <category term="golang基础" scheme="https://www.linkinstars.com/categories/golang%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mutex" scheme="https://www.linkinstars.com/tags/Mutex/"/>
    
  </entry>
  
  <entry>
    <title>Linux 图形化监控工具</title>
    <link href="https://www.linkinstars.com/post/a4957565.html"/>
    <id>https://www.linkinstars.com/post/a4957565.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.139Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近在分析线上问题，需要监控 Linux 相关指标，如果只是用命令，总是只能知道当前的值，无法记录过程。而设备不是云厂商的设备，所以没有相关监控，zabbix 有，但是没有相关权限可以看到。所以找到一些好用的监控小方案。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.linkinstars.com/categories/linux/"/>
    
    
    <category term="monitor" scheme="https://www.linkinstars.com/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>你的网络还好吗</title>
    <link href="https://www.linkinstars.com/post/8fbd221e.html"/>
    <id>https://www.linkinstars.com/post/8fbd221e.html</id>
    <published>2020-07-03T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.140Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前说了 CPU、内存 、IO 在排查过程中可能出现的问题以及出现问题会影响的指标，这次就来看看在 linux 中网络的问题。&lt;/p&gt;
&lt;p&gt;在实际中我们遇到的最多的网络问题就是：不通！！！无论是 ping 不通，物理链路不通，还是 dns 解析有问题导致的不通，还是容器间网络访问网络隔离造成的不通，等等，这个问题总是由于部署上的环境导致的。还有一类比较烦的问题就是网络带宽本来就不高的情况下，大量的请求导致网络的拥塞，最明显的感受就是接口请求超时，各种超时，nginx 超时，请求本身超时等等。对于这些问题如何进行排查呢？&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.linkinstars.com/categories/linux/"/>
    
    
    <category term="network" scheme="https://www.linkinstars.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>你的 IO 还好吗</title>
    <link href="https://www.linkinstars.com/post/f0943d44.html"/>
    <id>https://www.linkinstars.com/post/f0943d44.html</id>
    <published>2020-06-26T16:00:00.000Z</published>
    <updated>2021-05-19T15:51:06.138Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 CPU 看来内存好慢啊，看我跑的多快；在内存看来磁盘你好慢啊，看我比你还快点；磁盘…&lt;/p&gt;
&lt;p&gt;IO 问题并非特别常见，但是因为最终要落到磁盘上，当它成为瓶颈时，往往会拖慢你的脚本，今天我们来分析下在 linux 中的 IO 问题&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.linkinstars.com/categories/linux/"/>
    
    
    <category term="io" scheme="https://www.linkinstars.com/tags/io/"/>
    
  </entry>
  
</feed>
